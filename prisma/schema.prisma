generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ####----Enums ------####
enum Role {
  ADMIN
  STUDENT
}

enum InterventionType {
  AUTOEVALUATION
  STUDY_HABITS
  ACADEMIC_GOALS
}

// ####----Models ------####
model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  role          Role           @default(STUDENT)
  interventions Intervention[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Student {
  id        Int      @id @default(autoincrement())
  code      String   @unique @default("")
  dni       String   @unique @default("")
  name      String
  surname   String   @default("")
  grades    Grade[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id        Int          @id @default(autoincrement())
  code      String       @unique
  name      String
  semester  Int
  year      Int
  teacherId Int
  teacher   Teacher      @relation(fields: [teacherId], references: [id])
  grades    Grade[]
  risks     RiskCourse[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Teacher {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  dni       String   @unique
  name      String
  lastname  String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AcademicYear {
  id        Int              @id @default(autoincrement())
  year      Int              @unique
  periods   AcademicPeriod[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model AcademicPeriod {
  id        Int          @id @default(autoincrement())
  semester  Int
  startDate DateTime
  endDate   DateTime
  yearId    Int
  grades    Grade[]
  risks     RiskCourse[]
  year      AcademicYear @relation(fields: [yearId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Grade {
  id               Int            @id @default(autoincrement())
  value1           Float
  value2           Float
  value3           Float
  studentId        Int
  courseId         Int
  academicPeriodId Int
  student          Student        @relation(fields: [studentId], references: [id])
  course           Course         @relation(fields: [courseId], references: [id])
  academicPeriod   AcademicPeriod @relation(fields: [academicPeriodId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model RiskCourse {
  id               Int            @id @default(autoincrement())
  courseId         Int
  academicPeriodId Int
  failures         Int
  course           Course         @relation(fields: [courseId], references: [id])
  academicPeriod   AcademicPeriod @relation(fields: [academicPeriodId], references: [id])
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
}

model Intervention {
  id        Int              @id @default(autoincrement())
  type      InterventionType
  userId    Int
  messages  ChatMessage[]
  user      User             @relation(fields: [userId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model ChatMessage {
  id             Int          @id @default(autoincrement())
  InterventionId Int
  content        String
  is_user_sender Boolean      @default(false)
  intervention   Intervention @relation(fields: [InterventionId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
